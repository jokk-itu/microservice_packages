name: .NET

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    types: [opened, synchronize, reopened]
env:
  CONFIGURATION: Release

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        projects: ['Jokk.Microservice.Cors', 'Jokk.Microservice.Polly', 'Jokk.Microservice.Swagger', 'Jokk.Microservice.Log', 'Jokk.Microservice.Prometheus', 'Jokk.Microservice.Cache', 'Jokk.Microservice.RateLimit', 'Jokk.Microservice.HealthCheck']
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build ${{ matrix.projects }}/${{ matrix.projects }}.csproj -c $CONFIGURATION --no-restore
    - name: authenticate github nuget registry
      run: dotnet nuget add source --username jokk-itu --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/jokk-itu/index.json"
    - name: push packages to github nuget registry
      run: |
        package=$(ls ${{ matrix.projects }}/bin/$CONFIGURATION/*nupkg)
        dotnet nuget push "$package" --source "github" --skip-duplicate
        
  qualitycheck:
    name: Code Qualitycheck
    runs-on: windows-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"jokk-itu_microservice_packages" /o:"jokk-itu" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet clean --configuration $CONFIGURATION
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"    
